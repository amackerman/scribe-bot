// This script should be run after a document is created. It will take the markup generated by Discord and apply the correct formatting if needed.
// Additionally, it can be used to replace phrases if your bot has such a command and can remove extra line breaks sometimes used to make text in Discord more visually appealing.
// If one or more of these formatting situations do not apply, they will be ignored.

var DOC_ID = 'YOUR_DOCUMENT_ID_HERE';  // Replace with your actual document's ID

function formatDocument() {
  var doc = DocumentApp.openById(DOC_ID);
  var body = doc.getBody();

  // Replace phrases first
  replacePhrases(body);

  // Then, apply formatting for italics and bold
  var text = body.editAsText();
  formatTextWithAsterisks(text, body, /\*\*(.*?)\*\*/g, 'bold');  // Bold must be checked first due to its double asterisk
  formatTextWithAsterisks(text, body, /\*(.*?)\*/g, 'italic');

  // Finally, remove any empty lines
  removeEmptyLines(body);
}

function formatTextWithAsterisks(text, body, regex, formattingType) {
  var matches = [];
  var content = body.getText();
  var match;

  // First pass to identify matches
  while ((match = regex.exec(content)) !== null) {
    matches.push({start: match.index, end: match.index + match[0.length - 1]});
  }

  // Apply formatting based on type (bold or italic)
  matches.forEach(function(match) {
    var offset = formattingType === 'bold' ? 2 : 1;  // Bold has 2 asterisks, italic has 1
    var formatStartPos = match.start + offset;
    var formatEndPos = match.end - offset;

    if (formattingType === 'italic') {
      text.setItalic(formatStartPos, formatEndPos, true);
    } else if (formattingType === 'bold') {
      text.setBold(formatStartPos, formatEndPos, true);
    }
  });

  // Second pass to remove asterisks, starting from the end to avoid index shifting issues
  for (var i = matches.length - 1; i >= 0; i--) {
    var match = matches[i];
    var offset = formattingType === 'bold' ? 2 : 1;  // Adjust for bold
    text.deleteText(match.end - offset + 1, match.end);  // Adjusted to correctly target the asterisks for deletion
    text.deleteText(match.start, match.start + offset - 1);  // Ensure correct asterisk removal at the start
  }
}

function replacePhrases(body) {
  // Placeholder for phrases to replace. This should match whatever json file you have used in the bot to list phrases in a fantasy language or some other use case.
  var phrasesToReplace = {
    "search_phrase_1": "replacement_1",
    "search_phrase_2": "replacement_2",
    // Add more placeholders as needed
  };

  for (var searchPhrase in phrasesToReplace) {
    body.replaceText(searchPhrase, phrasesToReplace[searchPhrase]);
  }
}

function removeEmptyLines(body) {
    var paragraphs = body.getParagraphs();
    for (var i = paragraphs.length - 1; i >= 0; i--) {
        var paragraph = paragraphs[i];
        // Check if the paragraph is empty or contains only whitespace and it's not the last one
        if (paragraph.getText().trim() === '' && !isLastParagraphInSection(paragraph)) {
            paragraph.removeFromParent();
        }
    }
}

function isLastParagraphInSection(paragraph) {
    var nextSibling = paragraph.getNextSibling();
    return nextSibling === null || nextSibling.getType() === DocumentApp.ElementType.HORIZONTAL_RULE;
}
